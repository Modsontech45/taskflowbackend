generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  firstName           String
  lastName            String
  country             String?
  phone               String?
  email               String               @unique
  password            String
  emailVerifiedAt     DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  boardsOwned         Board[]              @relation("BoardsOwned")
  memberships         BoardMember[]
  passwordResetTokens PasswordResetToken[]
  subscriptions       Subscription[]
  tasksCreated        Task[]               @relation("TasksCreated")
  verificationTokens  VerificationToken[]
  payments            Payment[]
  notifications       Notification[]
}

model Subscription {
  id                 String                @id @default(uuid())
  userId             String
  plan               SubscriptionPlan
  status             SubscriptionStatus    @default(TRIAL)
  memberCount        Int                   @default(0)
  monthlyPrice       Float                 @default(0.0)
  trialEndsAt        DateTime?
  nextBillingDate    DateTime?
  paystackCustomerId String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  payments Payment[]
}

model Payment {
  id                String       @id @default(uuid())
  reference         String       @unique
  userId            String
  subscriptionId    String
  amount            Float
  status            String       @default("PENDING") // PENDING, SUCCESS, FAILED
  paystackReference String?
  paidAt            DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Board {
  id        String        @id @default(uuid())
  name      String
  ownerId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  owner     User          @relation("BoardsOwned", fields: [ownerId], references: [id], onDelete: Cascade)
  members   BoardMember[]
  tasks     Task[]

  @@index([ownerId])
}

model BoardMember {
  id        String    @id @default(uuid())
  boardId   String
  userId    String
  role      BoardRole @default(VIEWER)
  createdAt DateTime  @default(now())

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@index([userId, boardId])
}

model Task {
  id          String    @id @default(uuid())
  boardId     String
  title       String
  notes       String?
  startAt     DateTime
  endAt       DateTime
  status      String    @default("pending") // pending, expired
  isDone      Boolean   @default(false)
  doneAt      DateTime?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy User  @relation("TasksCreated", fields: [createdById], references: [id])

  @@index([boardId])
  @@index([createdById])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  type      String   // EMAIL_VERIFICATION, PASSWORD_RESET
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ===== ENUMS =====
enum BoardRole {
  OWNER
  EDITOR
  VIEWER
}

enum SubscriptionPlan {
  BASIC
  TEAM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  TRIAL
}
